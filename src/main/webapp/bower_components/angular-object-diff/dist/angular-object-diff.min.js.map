{"version":3,"sources":["angular-object-diff.min.js"],"names":["objectDiff","$sce","setOpenChar","char","openChar","setCloseChar","closeChar","diff","a","b","shallow","isOwn","equalObj","diffValue","equal","key","hasOwnProperty","isValidAttr","valueDiff","changed","removed","added","value","diffOwnProperties","formatToJsonXMLString","changes","properties","trustAsHtml","inspect","push","formatChange","join","formatObjToJsonXMLString","obj","formatChangesToXMLString","typeA","typeB","diffItem","diffOnly","property","stringifyObjectKey","escapeHTML","prefix","test","JSON","stringify","string","replace","_inspect","accumulator","keys","Object","length","i","String","service","toJsonView","objToJsonView","toJsonDiffView","toJsonViewFilter","ObjectDiff","toJsonDiffViewFilter","objToJsonViewFilter","angular","module","factory","filter","$inject"],"mappings":"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","file":"angular-object-diff.min.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('ds.objectDiff', [])\n        .factory('ObjectDiff', objectDiff)\n        .filter('toJsonView', toJsonViewFilter)\n        .filter('toJsonDiffView', toJsonDiffViewFilter)\n        .filter('objToJsonView', objToJsonViewFilter);\n\n    objectDiff.$inject = ['$sce'];\n    toJsonViewFilter.$inject = ['ObjectDiff'];\n    toJsonDiffViewFilter.$inject = ['ObjectDiff'];\n    objToJsonViewFilter.$inject = ['ObjectDiff'];\n\n    /* service implementation */\n    function objectDiff($sce) {\n\n        var openChar = '{',\n            closeChar = '}',\n            service = {\n                setOpenChar: setOpenChar,\n                setCloseChar: setCloseChar,\n                diff: diff,\n                diffOwnProperties: diffOwnProperties,\n                toJsonView: formatToJsonXMLString,\n                objToJsonView: formatObjToJsonXMLString,\n                toJsonDiffView: formatChangesToXMLString\n            };\n\n        return service;\n\n\n        /* service methods */\n\n        /**\n         * @param char\n         */\n        function setOpenChar(char) {\n            openChar = char;\n        }\n\n        /**\n         * @param char\n         */\n        function setCloseChar(char) {\n            closeChar = char;\n        }\n\n        /**\n         * diff between object a and b\n         * @param {Object} a\n         * @param {Object} b\n         * @param shallow\n         * @param isOwn\n         * @return {Object}\n         */\n        function diff(a, b, shallow, isOwn) {\n\n            if (a === b) {\n                return equalObj(a);\n            }\n\n            var diffValue = {};\n            var equal = true;\n\n            for (var key in a) {\n                if ((!isOwn && key in b) || (isOwn && typeof b != 'undefined' && b.hasOwnProperty(key))) {\n                    if (a[key] === b[key]) {\n                        diffValue[key] = equalObj(a[key]);\n                    } else {\n                        if (!shallow && isValidAttr(a[key], b[key])) {\n                            var valueDiff = diff(a[key], b[key], shallow, isOwn);\n                            if (valueDiff.changed == 'equal') {\n                                diffValue[key] = equalObj(a[key]);\n                            } else {\n                                equal = false;\n                                diffValue[key] = valueDiff;\n                            }\n                        } else {\n                            equal = false;\n                            diffValue[key] = {\n                                changed: 'primitive change',\n                                removed: a[key],\n                                added: b[key]\n                            }\n                        }\n                    }\n                } else {\n                    equal = false;\n                    diffValue[key] = {\n                        changed: 'removed',\n                        value: a[key]\n                    }\n                }\n            }\n\n            for (key in b) {\n                if ((!isOwn && !(key in a)) || (isOwn && typeof a != 'undefined' && !a.hasOwnProperty(key))) {\n                    equal = false;\n                    diffValue[key] = {\n                        changed: 'added',\n                        value: b[key]\n                    }\n                }\n            }\n\n            if (equal) {\n                return equalObj(a);\n            } else {\n                return {\n                    changed: 'object change',\n                    value: diffValue\n                }\n            }\n        }\n\n\n        /**\n         * diff between object a and b own properties only\n         * @param {Object} a\n         * @param {Object} b\n         * @return {Object}\n         * @param deep\n         */\n        function diffOwnProperties(a, b, shallow) {\n            return diff(a, b, shallow, true);\n        }\n\n        /**\n         * Convert to a readable xml/html Json structure\n         * @param {Object} changes\n         * @return {string}\n         * @param shallow\n         */\n        function formatToJsonXMLString(changes, shallow) {\n            var properties = [];\n\n            var diff = changes.value;\n            if (changes.changed == 'equal') {\n                return $sce.trustAsHtml(inspect(diff, shallow));\n            }\n\n            for (var key in diff) {\n                properties.push(formatChange(key, diff[key], shallow));\n            }\n\n            return $sce.trustAsHtml('<span>' + openChar + '</span>\\n<div class=\"diff-level\">' + properties.join('<span>,</span>\\n') + '\\n</div><span>' + closeChar + '</span>');\n\n        }\n\n        /**\n         * Convert to a readable xml/html Json structure\n         * @return {string}\n         * @param obj\n         * @param shallow\n         */\n        function formatObjToJsonXMLString(obj, shallow) {\n            return $sce.trustAsHtml(inspect(obj, shallow));\n        }\n\n        /**\n         * Convert to a readable xml/html Json structure\n         * @param {Object} changes\n         * @return {string}\n         * @param shallow\n         */\n        function formatChangesToXMLString(changes, shallow) {\n            var properties = [];\n\n            if (changes.changed == 'equal') {\n                return '';\n            }\n\n            var diff = changes.value;\n\n            for (var key in diff) {\n                var changed = diff[key].changed;\n                if (changed !== 'equal')\n                    properties.push(formatChange(key, diff[key], shallow, true));\n            }\n\n            return $sce.trustAsHtml('<span>' + openChar + '</span>\\n<div class=\"diff-level\">' + properties.join('<span>,</span>\\n') + '\\n</div><span>' + closeChar + '</span>');\n\n        }\n\n        /**\n         * @param obj\n         * @returns {{changed: string, value: *}}\n         */\n        function equalObj(obj) {\n            return {\n                changed: 'equal',\n                value: obj\n            }\n        }\n\n        /**\n         * @param a\n         * @param b\n         * @returns {*|boolean}\n         */\n        function isValidAttr(a, b) {\n            var typeA = typeof a;\n            var typeB = typeof b;\n            return (a && b && (typeA == 'object' || typeA == 'function') && (typeB == 'object' || typeB == 'function'));\n        }\n\n        /**\n         * @param key\n         * @param diffItem\n         * @returns {*}\n         * @param shallow\n         * @param diffOnly\n         */\n        function formatChange(key, diffItem, shallow, diffOnly) {\n            var changed = diffItem.changed;\n            var property;\n            switch (changed) {\n                case 'equal':\n                    property = (stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value));\n                    break;\n\n                case 'removed':\n                    property = ('<del class=\"diff\">' + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value) + '</del>');\n                    break;\n\n                case 'added':\n                    property = ('<ins class=\"diff\">' + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>' + inspect(diffItem.value) + '</ins>');\n                    break;\n\n                case 'primitive change':\n                    var prefix = stringifyObjectKey(escapeHTML(key)) + '<span>: </span>';\n                    property = (\n                    '<del class=\"diff diff-key\">' + prefix + inspect(diffItem.removed) + '</del><span>,</span>\\n' +\n                    '<ins class=\"diff diff-key\">' + prefix + inspect(diffItem.added) + '</ins>');\n                    break;\n\n                case 'object change':\n                    property = shallow ? '' : (stringifyObjectKey(key) + '<span>: </span>' + ( diffOnly ? formatChangesToXMLString(diffItem) : formatToJsonXMLString(diffItem)));\n                    break;\n            }\n\n            return property;\n        }\n\n        /**\n         * @param {string} key\n         * @return {string}\n         */\n        function stringifyObjectKey(key) {\n            return /^[a-z0-9_$]*$/i.test(key) ?\n                key :\n                JSON.stringify(key);\n        }\n\n        /**\n         * @param {string} string\n         * @return {string}\n         */\n        function escapeHTML(string) {\n            return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        }\n\n        /**\n         * @param {Object} obj\n         * @return {string}\n         * @param shallow\n         */\n        function inspect(obj, shallow) {\n\n            return _inspect('', obj, shallow);\n\n            /**\n             * @param {string} accumulator\n             * @param {object} obj\n             * @see http://jsperf.com/continuation-passing-style/3\n             * @return {string}\n             * @param shallow\n             */\n            function _inspect(accumulator, obj, shallow) {\n                switch (typeof obj) {\n                    case 'object':\n                        if (!obj) {\n                            accumulator += 'null';\n                            break;\n                        }\n                        if (shallow) {\n                            accumulator += '[object]';\n                            break;\n                        }\n                        var keys = Object.keys(obj);\n                        var length = keys.length;\n                        if (length === 0) {\n                            accumulator += '<span>' + openChar + closeChar + '</span>';\n                        } else {\n                            accumulator += '<span>' + openChar + '</span>\\n<div class=\"diff-level\">';\n                            for (var i = 0; i < length; i++) {\n                                var key = keys[i];\n                                accumulator = _inspect(accumulator + stringifyObjectKey(escapeHTML(key)) + '<span>: </span>', obj[key]);\n                                if (i < length - 1) {\n                                    accumulator += '<span>,</span>\\n';\n                                }\n                            }\n                            accumulator += '\\n</div><span>' + closeChar + '</span>'\n                        }\n                        break;\n\n                    case 'string':\n                        accumulator += JSON.stringify(escapeHTML(obj));\n                        break;\n\n                    case 'undefined':\n                        accumulator += 'undefined';\n                        break;\n\n                    default:\n                        accumulator += escapeHTML(String(obj));\n                        break;\n                }\n                return accumulator;\n            }\n        }\n    }\n\n    /* filter implementation */\n    function toJsonViewFilter(ObjectDiff) {\n        return function (value) {\n            return ObjectDiff.toJsonView(value);\n        };\n    }\n\n    function toJsonDiffViewFilter(ObjectDiff) {\n        return function (value) {\n            return ObjectDiff.toJsonDiffView(value);\n        };\n    }\n\n    function objToJsonViewFilter(ObjectDiff) {\n        return function (value) {\n            return ObjectDiff.objToJsonView(value);\n        };\n    }\n})();\n"],"sourceRoot":"/source/"}